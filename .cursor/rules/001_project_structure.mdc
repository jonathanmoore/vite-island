---
description: 
globs: 
alwaysApply: true
---
# Project Structure

This project follows the Islands Architecture pattern, which focuses on isolated interactive components within mostly static HTML.

## Directory Organization

- `src/islands/`: Web components (custom elements)
- `src/lib/`: Utility functions, shared classes, and core code
- `tests/`: Test files for components and utilities
- `public/`: Static assets
- `src/`: Other application files
- `.ai/`: Project planning and task management

## Technology Stack

- **Build Tool**: Vite for fast development and optimized production builds
- **Components**: Vanilla JavaScript Web Components (Custom Elements)
- **Styling**: Tailwind CSS for utility-first styling
- **Testing**: Vitest for unit and component testing
- **Architecture**: Islands architecture for progressive enhancement
- **No Framework**: Intentionally framework-free for simplicity and performance

### Key Dependencies

- Tailwind CSS v4 for styling through `@tailwindcss/vite` plugin
- Vitest + JSDOM for component testing

## Key Files

- `@src/main.js`: Application entry point that initializes island components
- `@src/lib/islands.js`: Core loading system for island components
- `@src/lib/utils.js`: Animation and UI utility functions
- `@index.html`: Main HTML template with static structure
- `@vite.config.js`: Vite configuration

## Progressive Enhancement

All interactive components should:
1. Work without JavaScript first (static HTML)
2. Be enhanced with JavaScript when loaded
3. Support conditional loading via attributes:
   - `client:visible`: Load when scrolled into view
   - `client:media="(...)`: Load based on media queries
   - `client:idle`: Load when browser is idle