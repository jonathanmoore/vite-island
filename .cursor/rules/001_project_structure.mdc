---
description: 
globs: 
alwaysApply: true
---
# Project Structure

This project follows the Islands Architecture pattern, which focuses on isolated interactive components within mostly static HTML.

## Directory Organization

- `src/islands/`: Web components (custom elements)
- `src/lib/`: Utility functions, shared classes, and core code
- `tests/`: Test files for components and utilities
- `public/`: Static assets
- `src/`: Other application files
- `.ai/`: Project planning and task management

## Technology Stack

- **Build Tool**: Vite for fast development and optimized production builds
- **Components**: Vanilla JavaScript Web Components (Custom Elements)
- **Styling**: Tailwind CSS for utility-first styling
- **Testing**: Vitest for unit and component testing
- **Architecture**: Islands architecture for progressive enhancement
- **No Framework**: Intentionally framework-free for simplicity and performance

### Key Dependencies

- Tailwind CSS v4 for styling through `@tailwindcss/vite` plugin
- Vitest + JSDOM for component testing

### CSS Styling

- Always prefer and use Tailwind CSS classes
- Make use of the attribute selectors for classes

```html
<!-- Will apply -->
<div data-active class="border border-gray-300 data-active:border-purple-500">
  <!-- ... -->
</div>
<!-- Will not apply -->
<div class="border border-gray-300 data-active:border-purple-500">
  <!-- ... -->
</div>
```
- Assign CSS variables via JS or html tags to compontents to access in styles
```html
<ul class="list-image-(--my-list-image)">
  <!-- ... -->
</ul>
```
- Use CSS classes for grouping
```html
<div class="group ...">
  <img src="..." />
  <h4>Spencer Sharp</h4>
  <svg class="hidden group-has-[a]:block ..."><!-- ... --></svg>
  <p>Product Designer at <a href="...">planeteria.tech</a></p>
</div>

<ul role="list">
  {#each people as person}
    <li class="group/item ...">
      <!-- ... -->
      <a class="group/edit invisible group-hover/item:visible ..." href="tel:{person.phone}">
        <span class="group-hover/edit:text-gray-700 ...">Call</span>
        <svg class="group-hover/edit:translate-x-0.5 group-hover/edit:text-gray-500 ..."><!-- ... --></svg>
      </a>
    </li>
  {/each}
</ul>

<div class="group is-published">
  <div class="hidden group-[.is-published]:block">
    Published
  </div>
</div>
```
- When needed target siblings using the Tailwind [&_] structure
```html
<div class="mb-10 [&_ul]:list-inside [&_ul]:list-disc [&_ul]:text-red-500">
  <ul>
    <li></li>
  </ul>
</div>
```
- Style children based on classes or attributes that belong to the parent container
```html
<div data-zoom-level="1">
 <div class="hidden [[data-zoom-level='1']_&]:block"></div>
</div>

<div class="active">
  <div class="hidden [.active_&]:block"></div>
</div>
```

## Key Files

- `@src/main.js`: Application entry point that initializes island components
- `@src/lib/islands.js`: Core loading system for island components
- `@src/lib/utils.js`: Animation and UI utility functions
- `@index.html`: Main HTML template with static structure
- `@vite.config.js`: Vite configuration

## Progressive Enhancement

All interactive components should:
1. Work without JavaScript first (static HTML)
2. Be enhanced with JavaScript when loaded
3. Support conditional loading via attributes:
   - `client:visible`: Load when scrolled into view
   - `client:media="(...)`: Load based on media queries
   - `client:idle`: Load when browser is idle