---
description: 
globs: 
alwaysApply: true
---
# Component Creation Workflow

## Naming Conventions

- Use kebab-case for component names (e.g., `click-count.js`)
- Use PascalCase for component classes (e.g., `class ClickCount extends HTMLElement`)
- Name test files with `.test.js` suffix (e.g., `click-count.test.js`)

## Creation Steps

1. First, create the HTML structure that works without JavaScript
2. Create the component JS file in `src/islands/`
3. Create a corresponding test file in `tests/islands/`
4. Add component to a page with appropriate loading directive:
   ```html
   <component-name client:visible>
     <!-- Initial HTML -->
   </component-name>
   ```

## Component Template

See the `@src/islands/click-count.js` file for a reference template on:
- State management via data attributes
- Animation queueing
- Event handling
- Custom event dispatch

## JS Structure Boilerplate

```js
// Import utilities if needed
import { utilityFunction } from "../lib/utils.js";

class ComponentName extends HTMLElement {
  // Define which attributes to observe for changes
  static get observedAttributes() {
    return ['state', 'theme'];
  }
  
  constructor() {
    super();
    // Initialize component state
    this.count = 0;
    this.animationQueue = Promise.resolve();
    console.log("ComponentName loaded");
  }

  async connectedCallback() {
    // Find elements within the component
    this.buttonElement = this.querySelector("button");
    this.contentElement = this.querySelector("[data-content]");
    
    // Set initial states
    this.dataset.active = "false";
    
    // Initialize and activate
    await utilityFunction(this.contentElement, "Initial content");
    this.dataset.active = "true";
    
    // Attach event listeners
    this.buttonElement?.addEventListener("click", this.handleClick.bind(this));
  }

  // Called when observed attributes change
  attributeChangedCallback(name, oldValue, newValue) {
    if (oldValue === newValue) return;
    
    console.log(`Attribute ${name} changed from ${oldValue} to ${newValue}`);
    
    // Handle specific attribute changes
    switch (name) {
      case 'state':
        this.updateDisplay();
        break;
      case 'theme':
        this.applyTheme(newValue);
        break;
    }
  }

  handleClick() {
    // Update state
    this.count++;
    
    // Dispatch custom event
    this.dispatchEvent(
      new CustomEvent("state-changed", {
        detail: { count: this.count },
        bubbles: true,
      })
    );
    
    // Update display
    this.updateDisplay();
  }

  async updateDisplay() {
    if (this.contentElement) {
      // Update content based on state
      this.contentElement.textContent = this.count;
    }
  }

  disconnectedCallback() {
    // Clean up event listeners
    this.buttonElement?.removeEventListener("click", this.handleClick.bind(this));
  }
}

// Register the component
if (!customElements.get("component-name")) {
  customElements.define("component-name", ComponentName);
}
```

## Integration

All components are automatically discovered and registered by the `@src/lib/islands.js` system